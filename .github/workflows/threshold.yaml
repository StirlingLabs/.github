name: Threshold

on:
  workflow_call:
    inputs:
      eventName:
        description: 'github.event_name'
        type: string
        required: true
      commitMessage:
        description: 'github.event.head_commit.message'
        type: string
      pullRequestDraft:
        description: 'github.event.pull_request.draft'
        type: boolean
        default: false
      refType:
        description: 'github.ref_type'
        type: string
        required: true
      refName:
        description: 'github.ref_name'
        type: string
        required: true
    outputs:
      continue:
        description: "Processing on this repo should continue"
        value: ${{ jobs.check.outputs.continue }}

jobs:
  check:
    name: Run Check
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      continue: ${{ !steps.collate_checks.outputs.should_skip }}
    steps:
      - name: Dump GitHub context
        if: false
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Event Name is Equal
        if: github.event_name == inputs.eventName
        run: echo ${{github.event_name}} == ${{inputs.commitMessage}}

      - name: Commit Message is Equal
        if: github.event.head_commit.message == inputs.commitMessage
        run: echo ${{github.event.head_commit.message}} == ${{inputs.commitMessage}}

      - name: pullRequestDraft is Equal
        if: github.event.pull_request.draft == inputs.pullRequestDraft
        run: echo ${{github.event.pull_request.draft}} == ${{inputs.pullRequestDraft}}

      - name: refType Message is Equal
        if: github.ref_type == inputs.refType
        run: echo ${{github.ref_type}} == ${{inputs.refType}}

      - name: Commit Message is Equal
        if: github.ref_name == inputs.refName
        run: echo ${{github.ref_name}} == ${{inputs.refName}}

      - name: Check if CI is forced
        id: force_ci_check
        if: |
            inputs.eventName == 'push' &&
            contains(inputs.commitMessage, '[force ci]')
        run: |
            echo "::set-output name=should_skip::false"
      - name: Check if PR is a draft
        id: pr_draft_check
        if: |
          inputs.eventName == 'pull_request' &&
          (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false')
        env:
            draft: ${{ inputs.pullRequestDraft }}
        run: |
            echo "::set-output name=should_skip::$draft"
      - name: Check if this is a Release
        id: released_check
        if: |
            inputs.eventName == 'push' &&
            inputs.refType == 'tag' &&
            startsWith(inputs.refName, 'v')
        run: |
            echo "::set-output name=should_skip::false"
      - name: Check if changes pushed
        id: push_new_check
        if: |
            inputs.eventName == 'push' &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false')
        uses: fkirc/skip-duplicate-actions@v4
        with:
            skip_after_successful_duplicate: 'true'
            paths_ignore: '["**/README.md", ".idea/**", ".editorconfig", ".git*", "docs/**", ".github/**", "**/Doxyfile.in"]'
            github_token: ${{ secrets.GITHUB_TOKEN }}
            concurrent_skipping: never
      - name: Collate Checks
        id: collate_checks
        if: |
            (steps.pr_draft_check.outcome == 'skipped' || steps.pr_draft_check.outputs.should_skip != 'false') &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false') &&
            (steps.push_new_check.outcome == 'skipped' || steps.push_new_check.outputs.should_skip == 'true')
        env:
            pr_draft_check: ${{ steps.pr_draft_check.outcome }}
            force_ci_check: ${{ steps.force_ci_check.outcome }}
            released_check: ${{ steps.released_check.outcome }}
            push_new_check: ${{ steps.push_new_check.outcome }}
        run: |
            echo "Step status was $pr_draft_check : $force_ci_check : $released_check : $push_new_check"
            if [ "$pr_draft_check" == "skipped" ] && \
                [ "$force_ci_check" == "skipped" ] && \
                [ "$released_check" == "skipped" ] && \
                [ "$push_new_check" == "skipped" ]
            then
                echo "All checks skipped, I don't know what to do."
                exit 1
            else
                echo "::set-output name=should_skip::true"
            fi
